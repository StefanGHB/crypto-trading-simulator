package com.cryptotrading.crypto_trading_sim.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketTransportRegistration;

/**
 * ‚ö° –ú–ê–ö–°–ò–ú–ê–õ–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù–ê WebSocket configuration –∑–∞ INSTANT real-time price updates
 * üöÄ ZERO DELAYS - Configured for professional-grade –º–∞–∫—Å–∏–º–∞–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç
 */
@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Value("${websocket.endpoint:/ws}")
    private String websocketEndpoint;

    @Value("${websocket.topic.prices:/topic/prices}")
    private String pricesTopicPrefix;

    /**
     * ‚ö° Create HIGH-PERFORMANCE TaskScheduler bean –∑–∞ INSTANT WebSocket heartbeat functionality
     */
    @Bean
    public ThreadPoolTaskScheduler messagingTaskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(16); // ‚ö° –£–í–ï–õ–ò–ß–ï–ù–û –æ—Ç 8 –Ω–∞ 16 –∑–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç
        scheduler.setThreadNamePrefix("websocket-instant-");
        scheduler.setWaitForTasksToCompleteOnShutdown(true);
        scheduler.setAwaitTerminationSeconds(5); // ‚ö° –ù–ê–ú–ê–õ–ï–ù–û –∑–∞ –ø–æ-–±—ä—Ä–∑–æ shutdown
        scheduler.initialize();
        return scheduler;
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        // ‚ö° Enable INSTANT broker —Å –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏ settings
        config.enableSimpleBroker("/topic", "/queue")
                .setHeartbeatValue(new long[]{5000, 5000}) // ‚ö° –ù–ê–ú–ê–õ–ï–ù–û –æ—Ç 10 –Ω–∞ 5 —Å–µ–∫—É–Ω–¥–∏ –∑–∞ –ø–æ-–±—ä—Ä–∑–æ heartbeat
                .setTaskScheduler(messagingTaskScheduler()); // ‚ö° HIGH-PERFORMANCE TaskScheduler

        // Set application destination prefix
        config.setApplicationDestinationPrefixes("/app");

        // Configure user destination prefix –∑–∞ user-specific messages
        config.setUserDestinationPrefix("/user");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        // ‚ö° Register the "/ws" endpoint –∑–∞ INSTANT WebSocket connections —Å –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏ settings
        registry.addEndpoint(websocketEndpoint)
                .setAllowedOriginPatterns("*") // For development - restrict in production
                .withSockJS()
                .setHeartbeatTime(15000) // ‚ö° –ù–ê–ú–ê–õ–ï–ù–û –æ—Ç 25 –Ω–∞ 15 —Å–µ–∫—É–Ω–¥–∏ –∑–∞ –ø–æ-–±—ä—Ä–∑–æ SockJS heartbeat
                .setDisconnectDelay(2000) // ‚ö° –ù–ê–ú–ê–õ–ï–ù–û –æ—Ç 5 –Ω–∞ 2 —Å–µ–∫—É–Ω–¥–∏ disconnect delay
                .setStreamBytesLimit(256 * 1024) // ‚ö° –£–í–ï–õ–ò–ß–ï–ù–û –æ—Ç 128KB –Ω–∞ 256KB stream limit –∑–∞ optimal performance
                .setHttpMessageCacheSize(2000) // ‚ö° –£–í–ï–õ–ò–ß–ï–ù–û –æ—Ç 1000 –Ω–∞ 2000 cache size –∑–∞ HTTP polling
                .setSessionCookieNeeded(false); // Disable session cookies –∑–∞ better performance

        // ‚ö° ALSO register without SockJS –∑–∞ PURE INSTANT WebSocket connections (–º–∞–∫—Å–∏–º–∞–ª–Ω–∞ performance)
        registry.addEndpoint(websocketEndpoint)
                .setAllowedOriginPatterns("*");
    }

    @Override
    public void configureWebSocketTransport(WebSocketTransportRegistration registration) {
        // ‚ö° –ú–ê–ö–°–ò–ú–ê–õ–ù–û optimize WebSocket transport –∑–∞ INSTANT real-time performance
        registration.setMessageSizeLimit(128 * 1024) // ‚ö° –£–í–ï–õ–ò–ß–ï–ù–û –æ—Ç 64KB –Ω–∞ 128KB message size limit
                .setSendBufferSizeLimit(1024 * 1024) // ‚ö° –£–í–ï–õ–ò–ß–ï–ù–û –æ—Ç 512KB –Ω–∞ 1MB send buffer
                .setSendTimeLimit(10 * 1000) // ‚ö° –ù–ê–ú–ê–õ–ï–ù–û –æ—Ç 20 –Ω–∞ 10 —Å–µ–∫—É–Ω–¥–∏ send timeout –∑–∞ –ø–æ-–±—ä—Ä–∑–æ processing
                .setTimeToFirstMessage(15 * 1000); // ‚ö° –ù–ê–ú–ê–õ–ï–ù–û –æ—Ç 30 –Ω–∞ 15 —Å–µ–∫—É–Ω–¥–∏ time to first message
    }
}